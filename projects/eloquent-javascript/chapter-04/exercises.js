////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, integrating = 1) {
  // create an array
  let array = [];
  if(start === end || (integrating < 1 && start < end)){
    return array;
  }
  // create for loop
  for(let i = start; i <= end; i += integrating){
    // add numbers in range to array
    array.push(i);
  }

  // return array
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(numbers) {
  if(numbers.length === 0){
    return 0;
  }
  // create a result set to index 0 of numbers
  let result = numbers[0];
  // create a for loop starting at 1st index of numbers
  for(let i = 1; i < numbers.length; i++){
    // add current number to result
    result += numbers[i];
  }

  // return result
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  // create new array
  let reversed = [];
  // loop through array and unshift elements to new array
  for(let element of array){
    reversed.unshift(element);
  }
  // return new array
  return reversed;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  // create new array
  let reversed = [];
  // loop through array and unshift elements to new array
  for(let element of array){
    reversed.unshift(element);
  }
  // loop through array and push element of reversed into same index in array
  for(let i = 0; i < array.length; i++){
    array[i] = reversed[i];
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for(let i = array.length - 1; i >= 0; i--){
    rest = {
      value: array[i],
      rest: rest
    };
  }

  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []){
  // base
  if(list.rest === null){
    array.push(list.value);
    return array;
  }
  // recursion
    // how to update array
  array.push(list.value);

  return listToArray(list.rest, array);
  
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  list = {
    value: value,
    rest: list
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, index) {
  return listToArray(list)[index];
}


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // determine if x and y ARE NOT objects
  if(typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  }

  // determine if x or y is not an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }

  // create arrays of each input keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  // if keys are not the same length return false
  if(xKeys.length !== yKeys.length){
    return false;
  }

  // iterate to determine if array keys match and values at keys match
  for (let i = 0; i < xKeys.length; i++){
    if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){ // determines if current key is NOT included in yKeys
      return false;
    }
  }

  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
